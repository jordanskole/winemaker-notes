// Ionic Starter App

// angular.module is a global place for creating, registering and retrieving Angular modules
// 'starter' is the name of this angular module example (also set in a <body> attribute in index.html)
// the 2nd parameter is an array of 'requires'

var app = angular.module('wineApp', ['ionic', 'firebase', 'ngCordova']);
var fb = new Firebase("https://winemaker-notes.firebaseio.com");

app.config(function($httpProvider, $stateProvider, $urlRouterProvider) {

  $httpProvider.defaults.useXDomain = true;
  // don't put controllers here, load them via the templates
  // this has to do with the way scope works in angular it needs to be applied to the ion-content directive
  // this will attach scope to the ion-view
  $stateProvider

    .state('login', {
      url: "/login",
      templateUrl: "templates/login.html"
    })
    .state('logout', {
      url: "/logout",
      controller: "LogoutCtrl"
    })
    .state('register', {
      url: "/register",
      templateUrl: "templates/register.html"
    })
    .state('account', {
      url: "/account",
      templateUrl: "templates/account.html",
      resolve: {
        // controller will not be loaded until $requireAuth resolves
        // Auth refers to our $firebaseAuth wrapper in the example above
        "currentAuth": ["Auth", function(Auth) {
          // $requireAuth returns a promise so the resolve waits for it to complete
          // If the promise is rejected, it will throw a $stateChangeError (see above)
          return Auth.$requireAuth();
        }]
      }
    })
    /*
     * Our Wine Views
     */
    .state('wines', {
      abstract: true,
      url: "/wines",
      template: "<ion-nav-view/>",
      resolve: {
        // controller will not be loaded until $requireAuth resolves
        // Auth refers to our $firebaseAuth wrapper in the example above
        "currentAuth": ["Auth", function(Auth) {
          // $requireAuth returns a promise so the resolve waits for it to complete
          // If the promise is rejected, it will throw a $stateChangeError (see above)
          return Auth.$requireAuth();
        }]
      }
    })
    .state('wines.index', {
      url: "/index",
      templateUrl: "templates/wines.index.html"
    })
    .state('wines.detail', {
      url: "/wines/:id",
      templateUrl: "templates/wines.detail.html"
    });

  // if we aren't at a known route
  $urlRouterProvider.otherwise("/wines/index");

});

app.run(function($ionicPlatform) {
  $ionicPlatform.ready(function() {
    // Hide the accessory bar by default (remove this to show the accessory bar above the keyboard
    // for form inputs)
    if(window.cordova && window.cordova.plugins.Keyboard) {
      cordova.plugins.Keyboard.hideKeyboardAccessoryBar(true);
    }
    if(window.StatusBar) {
      StatusBar.styleDefault();
    }
  });
});

// for states that require authentication send them to login
app.run(["$rootScope", "$state", function($rootScope, $state) {
  $rootScope.$on("$stateChangeError", function(event, toState, toParams, fromState, fromParams, error) {
    // We can catch the error thrown when the $requireAuth promise is rejected
    // and redirect the user back to the home page
    if (error === "AUTH_REQUIRED") {
      $state.go("login");
    }
  });
}]);

app.controller('AccountCtrl', ['$scope', '$state', 'Auth', 'Users', function($scope, $state, Auth, Users) {

  // get the details on the user
  //

}]);

// Login Controller before everything
app.controller('LoginCtrl', ['$scope', '$state', '$timeout', 'Auth', function($scope, $state, $timeout, Auth) {

  // remove the error if the user makes changes to the user model
  $scope.error = null;

  // check if there is a problem with the username
  $scope.$watch('user.email', function (newValue, oldValue) {
    if ($scope.error && $scope.error.code === 'INVALID_USER') {
      $scope.error = null;
    }
  });


  // check if there is a problem with the password
  $scope.$watch('user.password', function (newValue, oldValue) {
    if ($scope.error && $scope.error.code === 'INVALID_PASSWORD') {
      $scope.error = null;
    }
  });

  $scope.user = {};

  // login the old fashioned way with a email/pw
  $scope.simpleLogin = function () {
    Auth.$authWithPassword($scope.user).then(function(authData) {
      // what a success!
      console.log("Logged in as:", authData.uid);
      $state.go('wines.index');
    }).catch(function(error) {
      $scope.error = error;
      console.log(error.code);
    });
  };

}]);

app.controller('LogoutCtrl', ['$scope', '$state', 'Auth', function($scope, $state, Auth) {
  Auth.$unauth();
  console.log('Logged out');
  $state.go('login');
}]);

// Login Controller before everything
app.controller('RegisterCtrl', ['$scope', '$state', 'Auth', function($scope, $state, Auth) {

  // TODO: Switch to the Auth Service
  // TODO: User promises instead of callbacks

  // create our empty scope user
  $scope.user = {};

  // create our empty scope error
  $scope.error = null;

  // make sure the user has confirmed their password
  $scope.$watch('user.password2', function(newValue, oldValue) {
    if (newValue !== $scope.user.password) {
      $scope.error = {
        code: "INVALID_PASSWORD",
        message: "Passwords don't match."
      };
    } else {
      $scope.error = null;
    }
  });

  // login the old fashioned way with a email/pw
  $scope.register = function () {
    fb.createUser($scope.user, function (error, userData) {
      if (error) {
        // do something about the error
        console.log("Error creating user:", error);
      } else {
        // we have successfully created a user. Now, log them in and redirect them home to the wines page.
        // TODO: This should probably be in a then statement and not nested

        fb.authWithPassword($scope.user, function (error, authData) {

          if (error) {
            console.log('Error logging in user: ', error);
          } else {

            // successfully logged the user in.
            console.log("Authenticated successfully with payload:", authData);
            $state.go('wines.index');
          }
        });

      }
    });

  };

}]);

// Login Controller before everything
app.controller('WineDetailCtrl', ['$scope', '$state', '$stateParams', 'Auth', 'Wines', function($scope, $state, $stateParams, Auth, Wines) {

  Wines.$object($state.params.id).$bindTo($scope, 'wine');

}]);

// Login Controller before everything
app.controller('WinesCtrl', ['$scope', '$state', '$ionicPopover', 'Auth', 'Wines', function($scope, $state, $ionicPopover, Auth, Wines) {

  // get a list of the users wines
  $scope.wines = Wines.$array;
  $scope.newWine = {};

  // .fromTemplateUrl() method
  $ionicPopover.fromTemplateUrl('templates/wines.create.popover.html', {
    scope: $scope
  }).then(function(popover) {
    $scope.popover = popover;
  });

  $scope.active = 'kit';
  $scope.setActive = function (type) {
    console.log($scope.newWine.title);
    $scope.active = type;
  };
  $scope.isActive = function (type) {
    return type === $scope.active;
  };

  $scope.openPopover = function ($event) {
    $scope.popover.show($event);
  };

  $scope.closePopover = function () {
    $scope.popover.hide();
  };

  $scope.createWine = function () {

    // add the new wine to firebase
    Wines.$array.$add({
      "uid": Auth.$getAuth().uid,
      "name": $scope.newWine.title,
      "type": $scope.active,
      "created_on": moment().format()
    })
    .then(function (ref) {
      // return our object to normal
      $scope.newWine.title = null;

      var id = ref.key();
      // list.$indexFor(id); // returns location in the array

      // hide the popover
      $scope.popover.hide();

      // and take us to the create wine view with our new wine
      $state.go('wines.detail', {"id": id});
    });


  };

}]);

app.factory("Auth", ["$firebaseAuth",
  function($firebaseAuth) {
    return $firebaseAuth(fb);
  }
]);

app.factory('User', ['$firebaseAuth', '$firebaseObject', function($firebaseAuth, $firebaseObject) {
  var usersRef = new Firebase("https//winemaker-notes.firebaseio.com/users");
  return $firebaseObject(userRef);
}]);

app.factory("Wines", ['$firebaseArray', '$firebaseObject', function($firebaseArray, $firebaseObject) {
  var itemsRef = new Firebase("https://winemaker-notes.firebaseio.com/wines");
  var Wines = $firebaseArray(itemsRef);

  return {
    "$array": Wines,
    "$object": function (objectId) {
      return $firebaseObject(itemsRef.child(objectId));
    }
  };
}]);
